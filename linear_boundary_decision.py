# -*- coding: utf-8 -*-
"""Linear Boundary Decision.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tmMdFAfHaeC7zb9C1EWERLBY2EZVtoyw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df_movie = pd.read_csv('/content/movieData.csv')

df_movie

X = df_movie[['LevelOfViolence','CriticsRating']].values
y = df_movie['Watched'].values

y = df_movie['Watched']
plt.scatter(df_movie['LevelOfViolence'], df_movie['CriticsRating'], c = y)

# write a function to train the perceptron using training set
def train_perceptron(X, y):

    # set the desired number of epoches
    epochs=10000
    # create empty weight list
    weights = np.random.randn(X.shape[1]) * 0.01
    bias = 0
    num_iterations = 0
    for trail in range(epochs):
        num_iterations+=1
        error_count = 0
        for i in range(X.shape[0]):
            # print('xi is:',X[i])
            h_x = np.dot(X[i], weights) + bias
            prediction = 1 if h_x >= 0 else -1
            error = y[i] - prediction
            if error != 0:
                # update the new weight
                weights += 0.01*y[i] * X[i]
                bias += 0.01*y[i]
                error_count += 1
        if error_count == 0:
            print(f'Converged after {num_iterations+1} iterations')
            break
    return weights, bias, num_iterations

# train the model
weights,bias,num_iterations = train_perceptron(X,y)

import matplotlib.pyplot as plt

# Function to plot the decision boundary
def plot_decision_boundary(X, y, weights, bias):
    plt.scatter(X[:,0], X[:,1], c=y)
    x_values = np.array([min(X[:,0]), max(X[:,0])])
    y_values = -(bias + weights[0] * x_values) / weights[1]
    plt.plot(x_values, y_values, label='Decision Boundary')
    plt.xlabel('Level of Violence')
    plt.ylabel('Critic Ratings')
    plt.legend()
    plt.show()

plot_decision_boundary(X,y,weights,bias)

num_iterations